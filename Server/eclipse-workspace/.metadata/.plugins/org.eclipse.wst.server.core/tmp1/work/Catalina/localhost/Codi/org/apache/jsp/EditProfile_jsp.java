/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.41
 * Generated at: 2019-10-28 04:12:23 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import com.oreilly.servlet.multipart.DefaultFileRenamePolicy;
import com.oreilly.servlet.MultipartRequest;
import java.util.*;
import java.io.*;
import java.text.*;
import java.net.URLDecoder;
import java.util.concurrent.atomic.AtomicInteger;

public final class EditProfile_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/ConnectDB.jsp", Long.valueOf(1571928113282L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("java.text");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.net.URLDecoder");
    _jspx_imports_classes.add("com.oreilly.servlet.multipart.DefaultFileRenamePolicy");
    _jspx_imports_classes.add("java.util.concurrent.atomic.AtomicInteger");
    _jspx_imports_classes.add("com.oreilly.servlet.MultipartRequest");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

//oracle 계정
String jdbcUrl = "jdbc:oracle:thin:@220.68.233.34:1521:xe";
String userId = "hunlove789";
String userPw = "cjfdn1Y";

Connection conn = null;
PreparedStatement pstmt = null;
PreparedStatement pstmt2 = null;
PreparedStatement pstmt3 = null;
PreparedStatement pstmt4 = null;

ResultSet rs = null;
ResultSet rs2 = null;
ResultSet rs3 = null;
ResultSet rs4 = null;

String sql = "";
String sql2 = "";
String sql3 = "";
String sql4 = "";

String ry = "";

String returns = "";


try
{
 Class.forName("oracle.jdbc.driver.OracleDriver");
 conn = DriverManager.getConnection(jdbcUrl, userId, userPw);    
}
catch(SQLException e){
 out.println(e);
}


      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

String folderTypePath = "C:/Users/ZestPC/eclipse-workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp1/wtpwebapps/Codi/image/";
String name = new String();
String fileName = new String();
String realFileName = new String();
String array[] = new String[2];
String arraylist[] = new String[2];
int n =1 ;
int sizeLimit = 10 * 1024 * 1024; // 5메가까지 제한 넘어서면 예외발생
try {
	System.out.println("이미지다운시작");
    MultipartRequest multi = new MultipartRequest(request, folderTypePath, sizeLimit,"UTF-8",new DefaultFileRenamePolicy());
     
    
    Enumeration params = multi.getParameterNames();
    
	if(params.hasMoreElements()){
		for(int i=0; i<arraylist.length; i++){
			array[i] = (String) params.nextElement();
		
			if(array[i].equals("intro")){
				arraylist[i] = ((multi.getParameter(array[i]))).replace(System.getProperty("line.separator"),"").substring(2);//들어오는문자열 뒤에 \n이 포함되서 들어오므로 이걸 제거해줌 //ne
			}
		
		//String item = (multi.getParameter(array[i])).replace(System.getProperty("line.separator"),"");//들어오는문자열 뒤에 \n이 포함되서 들어오므로 이걸 제거해줌
		//URLDecoder.decode((URLDecoder.decode(item,"8859_1")),"UTF-8");
			else{
				arraylist[i] = (multi.getParameter(array[i])).replace(System.getProperty("line.separator"),"");//들어오는문자열 뒤에 \n이 포함되서 들어오므로 이걸 제거해줌 //new String(item.getBytes("8859_1"),"UTF-8");
			}
		}
	}
    
	 Enumeration files = multi.getFileNames();
	    //파일 정보가 있다면      
	    
    if (files.hasMoreElements()) {
    	name = (String) files.nextElement();
    	fileName = multi.getFilesystemName(name);
    }
	
	for(int i=0; i<arraylist.length; i++){
    	System.out.println(array[i]);
    	System.out.println(arraylist[i]);
    }
	
} catch (IOException e) {
    out.println("안드로이드 부터 이미지를 받아옵니다.");
}finally{
	
	
	String now = new SimpleDateFormat("yyyyMMddHHmmss").format(new java.util.Date());
	if(fileName != null){
		int i;
		i=fileName.lastIndexOf(".");
		realFileName = "Codi_ProfileImage_"+ now + fileName.substring(fileName.lastIndexOf("."),fileName.length());
		System.out.println(realFileName);
	}
	File oldFile = new File(folderTypePath + fileName);
	File newFile = new File(folderTypePath+"ProFIleImage/" + realFileName); //
	if(oldFile.renameTo(newFile)){
		System.out.println("Sucess");
		oldFile.delete();
	}else{
		System.out.println("Error");
	}	
	
	try {
		if(fileName != null && array[0] != null){
			sql = "UPDATE USERINFO SET PROFILEIMAGE = ? , INTRO = ? WHERE id = ?";
			
		}
	    pstmt = conn.prepareStatement(sql); 
	  	pstmt.setString(1, realFileName); //이미지 이름
	    pstmt.setString(2, arraylist[1]); //intro
	    pstmt.setString(3, arraylist[0]); //사용자 이름
	    pstmt.executeUpdate();
	    
	}catch (Exception e) {
		e.printStackTrace();
	} finally {
		System.out.println("sucess");
		out.println("sucess");
		if (pstmt2 != null)try {pstmt2.close();    } catch (SQLException ex) {}
	   if (pstmt != null)try {pstmt.close();} catch (SQLException ex) {}
	   if (conn != null)try {conn.close();    } catch (SQLException ex) {    }
	}	   

}

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
