/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.41
 * Generated at: 2019-07-12 11:35:51 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.net.URLEncoder;
import java.sql.*;
import java.util.*;
import com.google.android.gcm.server.*;

public final class FCMNotification_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("com.google.android.gcm.server");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.net.URLEncoder");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write(" \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write(" \r\n");
      out.write("\r\n");

/*
    ArrayList<String> token = new ArrayList<String>();    //token값을 ArrayList에 저장
    String MESSAGE_ID = String.valueOf(Math.random() % 100 + 1);    //메시지 고유 ID
    boolean SHOW_ON_IDLE = false;    //옙 활성화 상태일때 보여줄것인지
    int LIVE_TIME = 1;    //옙 비활성화 상태일때 FCM가 메시지를 유효화하는 시간입니다.
    int RETRY = 2;    //메시지 전송에 실패할 시 재시도 횟수입니다.
 
    
    String simpleApiKey = "AAAADifFQ8c:APA91bFl4P2H2X6K0YMaZWPHvgE2UM718HklCUrI6E8RhM89Y5_szHnItTB-h4BRhJ6WDbWoxFZZMaj8lcbM58xN_AuWpun16urYyFJIxAJjAIQaNtwwS_SV2UjP4fxoMgiYAz9LID8Z";
    String gcmURL = "https://android.googleapis.com/fcm/send";    
    //Connection conn = null; 
    //PreparedStatement stmt = null; 
    //ResultSet rs = null;

    try {

    	//String jdbcUrl = "jdbc:mysql://localhost:3306/"'database이름'"; // MySQL 계정
    	//String dbId = "userId"; // MySQL 계정
    	//String dbPw = "userPwd"; // 비밀번호        
        //String sql = "sql문"; // 등록된 token을 찾아오도록 하는 sql문
	
		//Class.forName("com.mysql.jdbc.Driver");
		//conn = DriverManager.getConnection(jdbcUrl, dbId, dbPw);
        //stmt = conn.prepareStatement(sql);    
        //rs = stmt.executeQuery();
        
        //모든 등록ID를 리스트로 묶음
        //while(rs.next()){
       token.add("eYxAWyFaAHg:APA91bGWMYcXsBeLbltj87Ot_YCXQVETd0Hk3eWzOZrtorF16osSai3V4YCaDvQvC11tv49KwyHtJHEYxtSG81eklBaqSX0KvIQp1gZ9x0H5fzc3IJ1823mZ4ZTsVjOYPLnT-NZKUwbL"); //저장된 토큰을 가져와 ArrayList에 저장합니다.
        //}
        //conn.close();
        request.setCharacterEncoding("utf-8");
    	String title = new String("Udoby".getBytes("UTF-8"),"UTF-8");    
        String msg = new String("mungchungE".getBytes("UTF-8"), "UTF-8");   //메시지 한글깨짐 처리  // msg.jsp 에서 전달받은 메시지

        out.print(msg);
        Sender sender = new Sender(simpleApiKey);
        Message message = new Message.Builder()
        .collapseKey(MESSAGE_ID)
        .delayWhileIdle(SHOW_ON_IDLE)
        .timeToLive(LIVE_TIME)
        .addData("body",msg)
        .addData("title",title)
        .build();
//위의 addData의 키 값인 "message" 와 "title" 안드로이드의 FirebaseMessagingService 에서
//받은 message , title과 일치해야 합니다.

     MulticastResult result1 = sender.send(message,token,RETRY);
   	    if (result1 != null) {
           List<Result> resultList = result1.getResults();
           for (Result result : resultList) {
               System.out.println(result.getErrorCodeName()); 
           }
       }
    }catch (Exception e) {
        e.printStackTrace();
    }
    
    System.out.println("핸드폰 메세지 전송중..");
    */

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
